{"ast":null,"code":"var _jsxFileName = \"/Users/cooperjensen/coding/portfolio/react-blockchain/react-blockchain/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport BlockComponent from './blockComponent';\nimport Block from './block';\nimport BigInt from 'big-integer';\nimport SHA256 from 'crypto-js/sha256';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet IDindex = 0;\nconst target = BigInt(\"000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", 16);\n\nfunction App() {\n  _s();\n\n  const [chain, addBlock] = useState([[IDindex, null, null, null, null]]);\n\n  function mineBlock() {\n    IDindex++;\n    const data = createRandomTx();\n    const currBlock = new Block(IDindex, data);\n    currBlock.prevHash = \"n/a\";\n\n    if (IDindex > 1) {\n      const lastBlockIndex = chain[IDindex - 1];\n      let lastBlock = new Block(lastBlockIndex[0], lastBlockIndex[1]);\n      lastBlock.prevHash = lastBlockIndex[2];\n      lastBlock.nonce = lastBlockIndex[4];\n    } //console.log(currBlock.prevHash);\n\n\n    mine(currBlock, target);\n    addBlock([...chain, [IDindex, data, currBlock.prevHash, currBlock.hash, currBlock.nonce]]); //console.log(chain);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: mineBlock,\n      children: \"start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), chain.map((block, i) => /*#__PURE__*/_jsxDEV(BlockComponent, {\n      block: block\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 33\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n} //helper functions\n//create random Tx to use as our \"data\"\n\n\n_s(App, \"hrtjqj31aJSVh/mpRLnihjL3P+c=\");\n\n_c = App;\n\nfunction createRandomTx() {\n  const addresses = ['A', 'B', 'C', 'D', 'E'];\n  let randA = addresses[Math.floor(Math.random() * addresses.length)];\n  addresses.splice(addresses.indexOf(randA), 1);\n  let randB = addresses[Math.floor(Math.random() * addresses.length)];\n  let randNum = Math.floor(Math.random() * 1000);\n  return `${randA} pays ${randB} ${randNum} dollars`;\n}\n\nfunction mine(block, targetDiff) {\n  block.nonce = 0;\n\n  while (true) {\n    let hash = SHA256(JSON.stringify(block)).toString();\n\n    if (BigInt(hash, 16) < targetDiff) {\n      console.log(typeof BigInt(hash, 16)); //hash = BigInt(hash,16).toString(16);\n\n      block.hash = hash;\n      break;\n    }\n\n    block.nonce++;\n  }\n} //A toHash function which will create a hash of this block using the data it contains\n\n\nfunction toHash(block) {\n  console.log(block.id, block.data, block.prevHash, block.nonce);\n  return SHA256(JSON.stringify(block.id + block.data + block.prevHash + block.nonce)).toString();\n}\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","BlockComponent","Block","BigInt","SHA256","IDindex","target","App","chain","addBlock","mineBlock","data","createRandomTx","currBlock","prevHash","lastBlockIndex","lastBlock","nonce","mine","hash","map","block","i","addresses","randA","Math","floor","random","length","splice","indexOf","randB","randNum","targetDiff","JSON","stringify","toString","console","log","toHash","id"],"sources":["/Users/cooperjensen/coding/portfolio/react-blockchain/react-blockchain/src/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport BlockComponent from './blockComponent'\nimport Block from './block';\nimport BigInt from 'big-integer';\nimport SHA256 from 'crypto-js/sha256';\n\nlet IDindex = 0;\nconst target = BigInt(\"000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",16);\n\n\n\nfunction App() {\n  const [chain, addBlock] = useState([[IDindex,null,null,null,null]]);\n  \n  function mineBlock(){\n    IDindex++;\n\n    const data = createRandomTx();\n\n    const currBlock = new Block(IDindex,data);\n    \n    currBlock.prevHash = \"n/a\";\n\n    if(IDindex > 1){\n      const lastBlockIndex = chain[IDindex-1];\n      let lastBlock = new Block(lastBlockIndex[0],lastBlockIndex[1]);\n      lastBlock.prevHash = lastBlockIndex[2];\n      lastBlock.nonce = lastBlockIndex[4];\n      \n     \n    }\n    //console.log(currBlock.prevHash);\n\n    mine(currBlock,target);\n    \n    \n\n    addBlock([...chain,[IDindex,data,currBlock.prevHash,currBlock.hash,currBlock.nonce]])\n    //console.log(chain);\n  }\n  \n  return (\n    <div>\n      <button onClick={mineBlock}>\n        start\n      </button>\n      {chain.map((block, i) => (<BlockComponent key={i} block={block}/> ))}\n    </div>\n    \n  );\n}\n\n//helper functions\n\n//create random Tx to use as our \"data\"\nfunction createRandomTx(){\n  const addresses = ['A','B','C','D','E'];\n  let randA = addresses[Math.floor(Math.random()*addresses.length)];\n  addresses.splice(addresses.indexOf(randA),1);\n  let randB = addresses[Math.floor(Math.random()*addresses.length)];\n  let randNum = Math.floor(Math.random()*1000);\n  return(`${randA} pays ${randB} ${randNum} dollars`);\n}\n\nfunction mine(block,targetDiff){\n \n  block.nonce = 0;\n  while(true){\n\n    let hash = SHA256(JSON.stringify(block)).toString();\n      if(BigInt(hash,16) < targetDiff){\n          console.log(typeof BigInt(hash,16));\n\n          //hash = BigInt(hash,16).toString(16);\n          \n          block.hash = hash;\n        \n          break;\n          \n      }\n      block.nonce++;\n  }\n}\n\n//A toHash function which will create a hash of this block using the data it contains\nfunction toHash(block){\n  console.log(block.id,block.data,block.prevHash,block.nonce);\n  return SHA256(JSON.stringify(block.id+block.data+block.prevHash+block.nonce)).toString();\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}