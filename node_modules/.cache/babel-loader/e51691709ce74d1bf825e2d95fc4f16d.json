{"ast":null,"code":"var _jsxFileName = \"/Users/cooperjensen/coding/portfolio/react-blockchain/react-blockchain/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport BlockComponent from './blockComponent';\nimport Block from './block';\nimport BigInt from 'big-integer';\nimport SHA256 from 'crypto-js/sha256';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet IDindex = 0;\nconst target = BigInt(\"0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", 16);\n\nfunction App() {\n  _s();\n\n  const [chain, addBlock] = useState([[IDindex, null, null, null, null]]);\n  const [timer, updateTimer] = useState([0]);\n\n  function mineBlock() {\n    //id increase by 1\n    IDindex++; //create random data to be our \"transaction\"\n\n    const data = createRandomTx(); //set block's previous hash attribute\n\n    const currBlock = new Block(IDindex, data);\n    currBlock.prevHash = \"n/a\";\n\n    if (IDindex > 1) {\n      const lastBlockIndex = chain[IDindex - 1];\n      let lastBlock = new Block(lastBlockIndex[0], lastBlockIndex[1]);\n      lastBlock.prevHash = lastBlockIndex[2];\n      lastBlock.nonce = lastBlockIndex[4]; // set current block prevHash to last block's hash\n\n      currBlock.prevHash = toHash(lastBlock);\n    } //mine the block, adding nonce and hash attributes to the block\n\n\n    mine(currBlock, target);\n    addBlock([...chain, [IDindex, data, currBlock.prevHash, currBlock.hash, currBlock.nonce]]);\n  } //mining function to find the block's hash. will increase nonce until it reaches target requirement\n\n\n  function mine(block, targetDiff) {\n    block.nonce = 0;\n\n    while (true) {\n      updateTimer(\"Nonce: \" + block.nonce);\n      console.log(block.nonce);\n      let hash = SHA256(JSON.stringify(block)).toString();\n\n      if (BigInt(hash, 16) < targetDiff) {\n        block.hash = hash;\n        break;\n      }\n\n      block.nonce++;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"topButtons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: mineBlock,\n        children: \"Mine\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: timer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), chain.map((block, i) => /*#__PURE__*/_jsxDEV(BlockComponent, {\n      block: block\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 33\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n} //helper functions\n//create random Tx to use as our \"data\"\n\n\n_s(App, \"4zNgm1r9f/zB7PQU6z6fWyx7aAE=\");\n\n_c = App;\n\nfunction createRandomTx() {\n  const addresses = ['A', 'B', 'C', 'D', 'E'];\n  let randA = addresses[Math.floor(Math.random() * addresses.length)];\n  addresses.splice(addresses.indexOf(randA), 1);\n  let randB = addresses[Math.floor(Math.random() * addresses.length)];\n  let randNum = Math.floor(Math.random() * 1000);\n  return `${randA} pays ${randB} ${randNum} dollars`;\n} //A toHash function which will create a hash of this block using the data it contains\n\n\nfunction toHash(block) {\n  return SHA256(JSON.stringify(block)).toString();\n}\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","BlockComponent","Block","BigInt","SHA256","IDindex","target","App","chain","addBlock","timer","updateTimer","mineBlock","data","createRandomTx","currBlock","prevHash","lastBlockIndex","lastBlock","nonce","toHash","mine","hash","block","targetDiff","console","log","JSON","stringify","toString","map","i","addresses","randA","Math","floor","random","length","splice","indexOf","randB","randNum"],"sources":["/Users/cooperjensen/coding/portfolio/react-blockchain/react-blockchain/src/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport BlockComponent from './blockComponent'\nimport Block from './block';\nimport BigInt from 'big-integer';\nimport SHA256 from 'crypto-js/sha256';\n\nlet IDindex = 0;\nconst target = BigInt(\"0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",16);\n\nfunction App() {\n  const [chain, addBlock] = useState([[IDindex,null,null,null,null]]);\n  const [timer, updateTimer] = useState([0]);\n  \n  function mineBlock(){\n    //id increase by 1\n    IDindex++;\n\n    //create random data to be our \"transaction\"\n    const data = createRandomTx();\n\n    //set block's previous hash attribute\n    const currBlock = new Block(IDindex,data);\n    \n    currBlock.prevHash = \"n/a\";\n\n    if(IDindex > 1){\n      const lastBlockIndex = chain[IDindex-1];\n      let lastBlock = new Block(lastBlockIndex[0],lastBlockIndex[1]);\n      lastBlock.prevHash = lastBlockIndex[2];\n      lastBlock.nonce = lastBlockIndex[4];\n      \n      // set current block prevHash to last block's hash\n      currBlock.prevHash = toHash(lastBlock);\n    }\n    \n    //mine the block, adding nonce and hash attributes to the block\n    mine(currBlock,target);\n\n    addBlock([...chain,[IDindex,data,currBlock.prevHash,currBlock.hash,currBlock.nonce]])\n    \n  }\n\n  //mining function to find the block's hash. will increase nonce until it reaches target requirement\n  function mine(block,targetDiff){\n    block.nonce = 0;\n\n    while(true){\n      updateTimer(\"Nonce: \" + block.nonce);\n      console.log(block.nonce);\n      let hash = SHA256(JSON.stringify(block)).toString();\n        if(BigInt(hash,16) < targetDiff){\n          block.hash = hash;\n          break;\n        }\n        block.nonce++;\n        \n    }\n  }\n  \n  return (\n    <div>\n      <div id='topButtons'>\n        <button onClick={mineBlock}>\n          Mine\n        </button>\n        <div>{timer}</div>\n      </div>\n      {chain.map((block, i) => (<BlockComponent key={i} block={block}/>))}\n    </div>\n      \n    \n  );\n}\n\n//helper functions\n\n//create random Tx to use as our \"data\"\nfunction createRandomTx(){\n  const addresses = ['A','B','C','D','E'];\n  let randA = addresses[Math.floor(Math.random()*addresses.length)];\n  addresses.splice(addresses.indexOf(randA),1);\n  let randB = addresses[Math.floor(Math.random()*addresses.length)];\n  let randNum = Math.floor(Math.random()*1000);\n  return(`${randA} pays ${randB} ${randNum} dollars`);\n}\n\n//A toHash function which will create a hash of this block using the data it contains\nfunction toHash(block){\n  return SHA256(JSON.stringify(block)).toString();\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}