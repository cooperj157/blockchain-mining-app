{"ast":null,"code":"var _jsxFileName = \"/Users/cooperjensen/coding/portfolio/react-blockchain/react-blockchain/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport BlockComponent from './blockComponent';\nimport Block from './block';\nimport BigInt from 'big-integer';\nimport SHA256 from 'crypto-js/sha256';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet IDindex = 0;\nconst target = BigInt(\"000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", 16);\n\nfunction App() {\n  _s();\n\n  const [chain, addBlock] = useState([[IDindex, null, null, null, null]]);\n\n  function mineBlock() {\n    IDindex++;\n    const data = createRandomTx();\n    const currBlock = new Block(IDindex, data);\n    mine(currBlock, target);\n    let prevHash = null;\n\n    if (IDindex > 1) {\n      const lastBlockIndex = chain[IDindex - 1];\n      let lastBlock = new Block(lastBlockIndex.id, lastBlockIndex.data);\n      lastBlock.hash = lastBlockIndex.hash;\n      lastBlock.nonce = lastBlockIndex.nonce;\n      console.log(lastBlock);\n      prevHash = lastBlock.toHash(lastBlock);\n      console.log(prevHash);\n    }\n\n    addBlock([...chain, [IDindex, data, prevHash, null, null]]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: mineBlock,\n      children: \"start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), chain.map((block, i) => /*#__PURE__*/_jsxDEV(BlockComponent, {\n      block: block\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 33\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n} //helper functions\n//create random Tx to use as our \"data\"\n\n\n_s(App, \"hrtjqj31aJSVh/mpRLnihjL3P+c=\");\n\n_c = App;\n\nfunction createRandomTx() {\n  const addresses = ['A', 'B', 'C', 'D', 'E'];\n  let randA = addresses[Math.floor(Math.random() * addresses.length)];\n  addresses.splice(addresses.indexOf(randA), 1);\n  let randB = addresses[Math.floor(Math.random() * addresses.length)];\n  let randNum = Math.floor(Math.random() * 1000);\n  return `${randA} pays ${randB} ${randNum} dollars`;\n}\n\nfunction mine(block, targetDiff) {\n  block.nonce = 0;\n  console.log(block.nonce);\n\n  while (true) {\n    block.hash = SHA256(JSON.stringify(block)).toString();\n\n    if (BigInt(`${block.hash}`, 16) < targetDiff) {\n      break;\n    }\n\n    block.nonce++;\n  }\n}\n\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","BlockComponent","Block","BigInt","SHA256","IDindex","target","App","chain","addBlock","mineBlock","data","createRandomTx","currBlock","mine","prevHash","lastBlockIndex","lastBlock","id","hash","nonce","console","log","toHash","map","block","i","addresses","randA","Math","floor","random","length","splice","indexOf","randB","randNum","targetDiff","JSON","stringify","toString"],"sources":["/Users/cooperjensen/coding/portfolio/react-blockchain/react-blockchain/src/App.js"],"sourcesContent":["import { useState } from \"react\";\nimport BlockComponent from './blockComponent'\nimport Block from './block';\nimport BigInt from 'big-integer';\nimport SHA256 from 'crypto-js/sha256';\n\nlet IDindex = 0;\nconst target = BigInt(\"000fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\",16);\n\n\n\nfunction App() {\n  const [chain, addBlock] = useState([[IDindex,null,null,null,null]]);\n  \n  function mineBlock(){\n    IDindex++;\n\n    const data = createRandomTx();\n\n    const currBlock = new Block(IDindex,data);\n    \n    mine(currBlock,target);\n    \n    let prevHash = null;\n\n    if(IDindex > 1){\n      const lastBlockIndex = chain[IDindex-1];\n      let lastBlock = new Block(lastBlockIndex.id,lastBlockIndex.data);\n      lastBlock.hash = lastBlockIndex.hash;\n      lastBlock.nonce = lastBlockIndex.nonce;\n      console.log(lastBlock);\n      prevHash = lastBlock.toHash(lastBlock);\n      console.log(prevHash);  \n    }\n\n    addBlock([...chain,[IDindex,data,prevHash,null,null]])\n  }\n  \n  return (\n    <div>\n      <button onClick={mineBlock}>\n        start\n      </button>\n      {chain.map((block, i) => (<BlockComponent key={i} block={block}/> ))}\n    </div>\n    \n   \n    \n  );\n}\n\n//helper functions\n\n//create random Tx to use as our \"data\"\nfunction createRandomTx(){\n  const addresses = ['A','B','C','D','E'];\n  let randA = addresses[Math.floor(Math.random()*addresses.length)];\n  addresses.splice(addresses.indexOf(randA),1);\n  let randB = addresses[Math.floor(Math.random()*addresses.length)];\n  let randNum = Math.floor(Math.random()*1000);\n  return(`${randA} pays ${randB} ${randNum} dollars`);\n}\n\nfunction mine(block,targetDiff){\n \n  block.nonce = 0;\n  console.log(block.nonce);\n  while(true){\n    block.hash = SHA256(JSON.stringify(block)).toString();\n      if(BigInt(`${block.hash}`,16) < targetDiff){\n          break;\n      }\n      block.nonce++;\n  }\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}